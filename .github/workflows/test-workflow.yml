name: Continuous Integration

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
    types:
      - opened
      - reopened
      - synchronize
  # create:
  #   tags:
  #     - 'v[0-9].[0-9].[0-9]+*'
  # schedule:
  #   - cron:  '* * * * *'

env:
  DOCKER_BUILDKIT: 1
  RUNNER_OS: ubuntu-18.04
  GIT_REPO: martialonline/test-actions

jobs:

  test-matrix:
    name: OnlyOnOpenPR
    runs-on: ${{ matrix.os }}
    if: github.repository == 'martialonline/test-actions'
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            path: Dockerfile
            target: local
            image: test:${{ github.job_nr }}
          - os: ubuntu-20.04
            path: DockerfilePlus
            target: local
            image: test-plus:latest
    steps:
      - name: Test
        run: |
          echo ${{ matrix.path }}
          echo ${{ matrix.target }}
          echo ${{ matrix.image }}
          echo ${{ matrix.image }}
          which kubectl

  build:
    name: Build (PrOpen)
    runs-on: ubuntu-20.04
    # if: github.event.pull_request.opened
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      # - name: Docker test
      #   run: docker build -t test-app:latest -f build/Dockerfile .
      - name: Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      # - name: Test Artifacts
      #   run: echo 'Test123' > hello.txt
      # - name: Upload Chart
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: hello
      #     path: ${{ github.workspace }}/hello.txt
      # - name: Retrieve latest Helm Chart
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: hello
      #     path: ${{ github.workspace }}
      # - name: Test Artifacts
      #   run: ls -ltr
      # - name: Docker test
      #   run: docker run --name test-app -d -p 3000:3000 test-app:latest
      # - name: Docker test
      #   run: docker ps
      # - name: Docker exec
      #   run: docker exec test-app ps
      # - name: Curl
      #   run: curl localhost:3000
      # - name: Unit Tests
      #   run: |
      #     go test ./...
      #     go version
      - name: Build Image
        uses: docker/build-push-action@v2
        with:
          tags: |
            ${{ secrets.MY_DOCKER_USER }}/docker-images/gotest:${{ github.sha }}
            ${{ secrets.MY_DOCKER_USER }}/gotest:${{ github.sha }}
          file: build/Dockerfile
          context: '.'
          push: false
      - name: Buildx Quiet
        run: >
          docker buildx build 
          --cache-from type=local,src=/tmp/.buildx-cache 
          --cache-to type=local,dest=/tmp/.buildx-cache
          -t ${{ secrets.MY_DOCKER_USER }}/gotest:${{ github.sha }} -f build/Dockerfile . 2>&1 > /dev/null
      - name: Retrieve Tag
        id: get_version
        run: echo ::set-output name=GIT_TAG::$(echo ${GITHUB_REF/refs\/tags\//} | tr -d v)
      - name: NotifyIfFailedMaster
        if: failure() && github.ref == 'refs/heads/master'
        run: echo Notification Here

  publish:
    name: Publish Artifacts
    runs-on: ubuntu-latest
    needs: build
    if: github.event.pull_request.merged || github.event_name == 'create' && contains(github.ref, 'refs/tags/')
    # if: github.event_name == 'create' && contains(github.ref, 'refs/tags/')
    # if: github.event.push.tags && contains(github.ref, 'release') # If working on a release branch
    # if: github.event.label.name == '<label_name>'                 # If particular label is set
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Retrieve Tag
        id: get_version
        run: echo ::set-output name=GIT_TAG::$(echo ${GITHUB_REF/refs\/tags\//} | tr -d v)
      - name: Push Image
        uses: docker/build-push-action@v1
        with:
          repository: ${{ secrets.MY_DOCKER_USER }}/docker-images/gotest
          dockerfile: build/Dockerfiles
          path: '.'
          registry: ${{ secrets.MY_DOCKER_REGISTRY }}
          tag_with_ref: false
          tags: ${{ steps.get_version.outputs.GIT_TAG }},latest
          push: false

  testJob:
    name: TestJob
    runs-on: ubuntu-latest
    # needs: [test-matrix]
    steps:
      - name: TestJobFail
        run: echos "I will fail"
      - name: TestJobAlways
        run: echo "I always run!"
        if: failure() || success()
      - name: TestJobFail2
        run: echos false

  testJob2:
    name: TestJob2
    runs-on: ubuntu-latest
    needs: [test-matrix]
    steps:
      - name: TestJobFail
        run: echos "I will fail"
      - name: TestJobAlways
        run: echo "I always run!"
        if: failure() || success()
      - name: TestJobFail2
        run: echos false

  # For slack notifications and stuff
  job-failure:
    name: OnlyIfFailed
    runs-on: ubuntu-18.04
    if: always() && github.ref == 'refs/heads/master'
    needs: testJob2
    steps:
      - name: 'Test'
        id: check
        uses: martialonline/workflow-status@v1
      - name: Calculate SHA
        id: commit
        run: |
          echo "::set-output name=sha::$(echo ${GITHUB_SHA} | cut -c1-7)"
          echo "::set-output name=repo::$(echo ${GITHUB_REPOSITORY} | cut -d '/' -f 2)"
      - uses: 8398a7/action-slack@v3
        if: steps.check.outputs.status == 'failure'
        with:
          status: custom
          custom_payload: |
            {
              username: 'Github',
              icon_emoji: ':octocat:',
              mention: 'channel',
              channel: '#dboenig-test',
              attachments: [{
                title: '${{ steps.commit.outputs.repo }}',
                text: '${{ steps.check.outputs.status }}' == 'success' ? 'good' : '${{ steps.check.outputs.status }}' == 'failure' ? 'danger' : 'warning',
                color: '${{ steps.check.outputs.status }}' == 'success' ? 'good' : '${{ steps.check.outputs.status }}' == 'failure' ? 'danger' : 'warning',
                fields: [{
                  title: 'Commit Hash',
                  value: '${{ steps.commit.outputs.sha }}',
                  short: true
                },
                {
                  title: 'Author',
                  value: '${{ github.actor }}',
                  short: true
                },
                {
                  title: 'Commit Message',
                  value: `${{ github.event.head_commit.message }}`,
                  short: false
                },
                {
                  title: 'Pipeline URL',
                  value: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}',
                  short: false
                }]
              }]
            }
          # author_name: ''
          # channel: '#dboenig-test'
          # username: Github-CI
          # icon_emoji: ':nginx:'
          # fields: repo,commit,message,author,took
          # text: 'Hans Peter mueffelt'
          # mention: here
          # if_mention: failure
          # status: ${{ job.status }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          GITHUB_SHA: ${{ github.sha }}

      # - name: Slack Notification
      #   uses: rtCamp/action-slack-notify@master
      #   if: contains(steps.check.outputs.status, 'failed')
      #   env:
      #     SLACK_CHANNEL: dboenig-test
      #     SLACK_COLOR: '#3278BD'
      #     SLACK_ICON_EMOJI: ':nginx:'
      #     SLACK_TITLE: Pipeline Failure
      #     SLACK_MESSAGE: 'The workflow pipeline has failed, please check the log URL below'
      #     SLACK_FOOTER: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
      #     SLACK_USERNAME: GitHub-CI
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
