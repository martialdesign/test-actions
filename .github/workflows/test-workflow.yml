name: Continuous Integration

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
    types:
      - opened
      - reopened
      - synchronize
  # create:
  #   tags:
  #     - 'v[0-9].[0-9].[0-9]+*'
  # schedule:
  #   - cron:  '* * * * *'

env:
  DOCKER_BUILDKIT: 1
  RUNNER_OS: ubuntu-18.04

jobs:

  test-matrix:
    name: OnlyOnOpenPR
    runs-on: ${{ matrix.os }}
    if: github.event.pull_request.opened
    strategy:
      matrix:
        include:
          - os: ubuntu-18.04
            path: Dockerfile
            target: local
            image: test:${{ github.job_nr }}
          - os: ubuntu-20.04
            path: DockerfilePlus
            target: local
            image: test-plus:latest
    steps:
      - name: Test
        run: |
          echo ${{ matrix.path }}
          echo ${{ matrix.target }}
          echo ${{ matrix.image }}
          echo ${{ matrix.image }}

  build:
    name: Build (PrOpen)
    runs-on: ubuntu-latest
    if: github.event.pull_request.opened
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      # - name: Docker test
      #   run: docker build -t test-app:latest -f build/Dockerfile .
      - name: Docker test
        run: docker images
      - name: Test Artifacts
        run: echo 'Test123' > hello.txt
      - name: Upload Chart
        uses: actions/upload-artifact@v2
        with:
          name: hello
          path: ${{ github.workspace }}/hello.txt
      - name: Retrieve latest Helm Chart
        uses: actions/download-artifact@v2
        with:
          name: hello
          path: ${{ github.workspace }}
      - name: Test Artifacts
        run: ls -ltr
      # - name: Docker test
      #   run: docker run --name test-app -d -p 3000:3000 test-app:latest
      # - name: Docker test
      #   run: docker ps
      # - name: Docker exec
      #   run: docker exec test-app ps
      # - name: Curl
      #   run: curl localhost:3000
      # - name: Unit Tests
      #   run: |
      #     go test ./...
      #     go version
      # - name: Build Image
      #   uses: docker/build-push-action@v1
      #   with:
      #     repository: ${{ secrets.MY_DOCKER_USER }}/docker-images/gotest
      #     dockerfile: build/Dockerfile
      #     path: '.'
      #     tag_with_sha: true
      #     push: false
      - name: Retrieve Tag
        id: get_version
        run: echo ::set-output name=GIT_TAG::$(echo ${GITHUB_REF/refs\/tags\//} | tr -d v)
      - name: NotifyIfFailedMaster
        if: failure() && github.ref == 'refs/heads/master'
        run: echo Notification Here

  publish:
    name: Publish Artifacts
    runs-on: ubuntu-latest
    needs: build
    if: github.event.pull_request.merged || github.event_name == 'create' && contains(github.ref, 'refs/tags/')
    # if: github.event_name == 'create' && contains(github.ref, 'refs/tags/')
    # if: github.event.push.tags && contains(github.ref, 'release') # If working on a release branch
    # if: github.event.label.name == '<label_name>'                 # If particular label is set
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Retrieve Tag
        id: get_version
        run: echo ::set-output name=GIT_TAG::$(echo ${GITHUB_REF/refs\/tags\//} | tr -d v)
      - name: Push Image
        uses: docker/build-push-action@v1
        with:
          repository: ${{ secrets.MY_DOCKER_USER }}/docker-images/gotest
          dockerfile: build/Dockerfiles
          path: '.'
          registry: ${{ secrets.MY_DOCKER_REGISTRY }}
          tag_with_ref: false
          tags: ${{ steps.get_version.outputs.GIT_TAG }},latest
          push: false

  testJob:
    name: TestJob
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [test-matrix]
    steps:
      - name: TestJobFail
        run: echos "I will fail"
      - name: TestJobAlways
        run: echo "I always run!"
        if: failure() || success()
      - name: TestJobFail2
        run: echos false

  testJob2:
    name: TestJob2
    runs-on: ubuntu-latest
    needs: [test-matrix]
    steps:
      - name: TestJobFail
        run: echos "I will fail"
      - name: TestJobAlways
        run: echo "I always run!"
        if: failure() || success()
      - name: TestJobFail2
        run: echos false

  # For slack notifications and stuff
  job-failure:
    name: OnlyIfFailed
    runs-on: ubuntu-18.04
    if: always() && github.ref == 'refs/heads/master'
    needs: [testJob]
    steps:
      - name: 'Test'
        id: check
        uses: martialonline/workflow-failure-action@master
      - run: echo ${{ steps.check.outputs.failures }}
        if: ${{steps.check.outputs.failures}} > 0
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@master
        if: steps.check.outputs.failures != '0'
        env:
          SLACK_CHANNEL: dboenig-test
          SLACK_COLOR: '#3278BD'
          SLACK_ICON_EMOJI: ':github:'
          SLACK_TITLE: Pipeline Failure
          SLACK_MESSAGE: 'The workflow pipeline has failed, please check the log URL below'
          SLACK_FOOTER: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          SLACK_USERNAME: GitHub-CI
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
